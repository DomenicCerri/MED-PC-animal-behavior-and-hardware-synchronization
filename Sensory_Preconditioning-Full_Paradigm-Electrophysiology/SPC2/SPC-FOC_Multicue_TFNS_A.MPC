\ Sensory Pre-Conditioning (SPC): First order training A
\ Description: 28 cues (14 CS+, 14 CS-); CS+ coterminates with 3 pellets on a 85% reinforcement (12/14) schedule
\ Created: 12/10/09
\ Last Updated: 9/15/2011
\ Author: Michael Saddoris & Domenic Cerri

\Inputs
^LLever=2
^RLever=1
^Foodcup=5

\Outputs
^RPanelLight=3
^LPanelLight=4
^Tone=6
^Noise=7
^Houselight=8
^Fan=10
^Pellet=11
^Cue_LED=12
^TTL_TONE=17
^TTL_SolidLight=18
^TTL_NOISE=19
^TTL_FlashingLight=20
^TTL_FOODCUP_ENTRY=21
^TTL_FOODCUP_EXIT=22
^TTL_Pellet=23
^TTL_CS_PLUS=24
^TTL_CS_PLUS_NR=25
^TTL_CS_MINUS=26

\Variables
\ A = LIST ITIs (Set A)
\ B = LIST ITIs (Set B)
\ C = LIST ITIs (Set C)
\ D = LIST CS Type (Set A)
\ E = LIST CS Type (Set B)
\ F = LIST CS Type (Set C)
\ G = Current ITI
\ H = Current Trial Type
\ I = 
\ J = CS+Reinforced Total Counter
\ K = CS+NonReinforced Total Counter
\ L = CS- Total Counter
\ M = 
\ N = 
\ O = 
\ P = 
\ Q = 
\ R = 
\ S = Session Timer
\ T = 
\ U = 
\ V = 
\ W = 
\ X = 
\ Y = Temp Counter for FC entries/exits
\ Z = 

\Zpulses:
\Z1  - 10s Flashing Light
\Z2  - 
\Z3  - 
\Z4  - Event006 - FLASHING LIGHT
\Z5  - 10s Solid Light
\Z6  - Event004 - SOLID LIGHT
\Z7  - 10s Noise
\Z8  - Event005 - NOISE
\Z9  - 10s Tone
\Z10 - Event003 - TONE
\Z11 - Event007 - FOODCUP ENTRY
\Z12 - Event008 - FOODCUP EXIT
\Z13 - 3 Pellets
\Z14 - Event009 - PELLET
\Z15 - Event010 - CS+
\Z16 - Event011 - CS+NR
\Z17 - Event012 - CS-
\Z18 - 
\Z19 - 
\Z20 - 
\Z21 - 
\Z22 - 
\Z23 - 
\Z24 - 
\Z25 - 
\Z26 - 
\Z27 - 
\Z28 - 
\Z29 - 
\Z30 - 


LIST A = 105", 260", 175", 230", 205", 255", 205", 200", 180", 175", 190", 150", 180", 85", 135", 95", 215", 230", 80", 145", 195", 230", 115", 85", 200", 135", 95", 170"
LIST B = 95", 85", 240", 165", 165", 130", 250", 80", 240", 135", 160", 155", 185", 190", 115", 245", 215", 255", 135", 165", 110", 140", 120", 160", 175", 230", 245", 135"
LIST C = 190", 120", 135", 160", 110", 195", 115", 235", 205", 130", 135", 115", 165", 230", 260", 205", 140", 235", 235", 125", 190", 150", 160", 210", 205", 100", 180", 85"
LIST D = 1, 0, 1, 1, 0, 0, 0, 1, 2, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 2, 1, 0, 0, 0, 1
LIST E = 0, 1, 2, 1, 0, 1, 1, 0, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0
LIST F = 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 2, 1
LIST Z = 11", 12", 13", 14"

Dim W = 10
Dim X = 2000

DISKCOLUMNS = 1

S.S.1,
      S1,
          .1": ON ^LLever, ^RLever ---> S2
      S2,
          #START: ON ^Fan, ^Houselight ---> S3
      S3, 
          .1": LIST G = A(I); LIST H = D(M) ---> S4
      S4,
          G#T: ON ^Cue_LED ---> S5
      S5, 
          10": OFF ^Cue_LED; IF H = 1 [@PLUS, @MINUS]
               @PLUS: Z1; Z15; Z13; ADD J; Show 1, S1_Plus, J; SET X(w(0))=S; ADD w(0); Set X(w(0))= -987.987 ---> S3
               @MINUS: ---> S6
      S6,
          .1": IF H = 2 [@NonPlus, @CSMinus]
               @NonPlus: Z1; Z16; ADD K; Show 2, S1_Plus_NR, K; SET X(w(1))=S; ADD w(1); Set X(w(1))= -987.987 ---> S3
               @CSMinus: Z5; Z17; ADD L; Show 3, S1_Minus, L; SET X(w(2))=S; ADD w(2); Set X(w(2))= -987.987 ---> S3

S.S.2,  \Flashing Right Panel Light
      S1,   
          #Z1: Z2; Z4 ---> S2
      S2,  
          10.25": Z3 ---> S1

S.S.3, \Intermittent Light generator
      S1,
          #Z2: ---> S2
      S2, 
          0.25": ON ^RPanelLight ---> S3
          #z3: OFF ^RPanelLight ---> S1
      S3, 
          0.25": OFF ^RPanelLight ---> S2
          #z3: OFF ^RPanelLight ---> S1

S.S.4, \FlashingLight TTL
      S1, 
    	  #Z4: ---> S2
      S2,
	  0.25": ON ^TTL_FlashingLight ---> S3
      S3, 
    	  0.001": OFF ^TTL_FlashingLight ---> S1

S.S.5, \Solid Left Panel Light
      S1, 
          #Z5: ON ^LPanelLight; Z6 ---> S2
      S2, 
          10": OFF ^LPanelLight ---> S1

S.S.6, \SolidLight TTL
      S1,
	  #Z6: ON ^TTL_SolidLight ---> S2
      S2,
	  0.001": OFF ^TTL_SolidLight ---> S1    

S.S.7, \Noise 
      S1, 
          #Z7: Z8; ~OnFreq(MG, BOX,O);~; ---> Sx
     
S.S.8, \Noise Parameters
      S1,
          #Start: SET O = 800;           \ default freq = 1000 hz 
                SET P = 90;             \ volume = 95 db
                SET Q = 10;             \ rise\fall time = 10 ms
                SET R = 10000;           \ duration = 10000 ms
                ~InitANL926;~;        \ reset ANL-926
                ~SetFreq(MG, BOX,O);~;      \ initialize frequency
                ~SetAmp(MG, BOX,P);~;       \ initialize amplitude
                ~SetRF(MG, BOX,Q);~;        \ initialize rise\fall time
                ~SetDur(MG, BOX,R);~;       \ initialize duration
                ~SETCLICKFREQ(MG,BOX,10);~;--->SX         \ SET CLICK FREQUENCY 

S.S.9, \Noise TTL
      S1,
          #Z8: ON ^TTL_NOISE ---> S2
      S2, 
          0.001": OFF ^TTL_NOISE ---> S1

S.S.10, \Tone
      S1, 
          #Z9: ON ^TONE; Z10 ---> S2
      S2, 
          10": OFF ^TONE ---> S1

S.S.11, \Tone TTL
      S1,
          #Z10: ON ^TTL_TONE ---> S2
      S2,
          0.001": OFF ^TTL_TONE ---> S1

S.S.12, \Beam Breaks
      S1,
          #START: ---> S2

      S2,    \ THIS IS DIRECTLY FROM MED. "Beam Break Defined - 20 ms Break, 20 ms Release.
       \ Inputs in Level Mode generate an input "count" on each interrupt. 
       \ With a 1ms system resolution 2 counts will be reached in 20ms. The Z22 pulse
       \ is used to signal a complete Beam Break. The second statement resets the
       \ counter every 20 ms so that a partial Beam Break of less than 20 ms will 
       \ constitute a response.

          #R^Foodcup: ADD Y; if Y >= 2 [@BeamBreak, @NoBeamBreak]
              @BeamBreak: Z11; Set Y = 0 ---> S3
              @NoBeamBreak: ---> SX
       S3,    \ As long as the Bream is broken, the second statement causes a re-entry to
       \ this State. This resets the internal 20 ms timer so that it never times out.
       \ When the beam is released for 20 ms, the time times out and a Z23 pulse
       \ signals the release.

          0.02": Z12 ---> S2
          #R^Foodcup: ---> S3

S.S.13, \FoodCup Entry TTL
       S1, 
           #Z11: ON ^TTL_FOODCUP_ENTRY; SET X(w(4))=S; ADD w(4); Set X(w(4))= -987.987 ---> S2
       S2, 
           0.001": OFF ^TTL_FOODCUP_ENTRY ---> S1

S.S.14, \FoodCup Exit TTL
       S1,
           #Z12: ON ^TTL_FOODCUP_EXIT; SET X(w(5))=S; ADD w(5); Set X(w(5))= -987.987 ---> S2
       S2,
           0.001": OFF ^TTL_FOODCUP_EXIT ---> S1

S.S.15,  \(delayed) Pellet Delivery
       S1, 
           #Z13: ---> S2
       S2,
           9.75": Z14; ON ^Pellet ---> S3
       S3,
	   0.25": OFF ^Pellet ---> S4
       S4, 
           0.25": ON ^Pellet ---> S5
       S5, 
           0.25": OFF ^Pellet ---> S6
       S6,
           0.25": ON ^Pellet ---> S7
       S7,
           0.25": OFF ^Pellet ---> S1

S.S.16, \Pellet TTL

       S1,
           #Z14: ON ^TTL_Pellet; SET X(w(3))=S; ADD w(3); Set X(w(3))= -987.987 ---> S2
       S2,
           0.001": OFF ^TTL_Pellet ---> S1

S.S.17, \Session timer. Returns timestamp S every 0.1"

       S1,
	   #START: ---> S2
       S2, 
	   .1": Set S = S + .1"; SHOW 5, Min, S/1' ---> SX

S.S.18, \ Kill session after all cues delivered
       S1,
           1": IF (J+K+L)<41 [@Session, @Kill]
             @Session: SHOW 4, TOTAL, J+K+L ---> SX
             @Kill: ---> S2
       S2, 
           10": OFF ^Houselight, ^Fan; LOCKON ^LLever, ^RLever ---> STOPABORTFLUSH

S.S.19, \CS+ TTL
       S1,
           #Z15: ON ^TTL_CS_PLUS ---> S2
       S2,
           0.001": OFF ^TTL_CS_PLUS ---> S1

S.S.20, \CS+NR TTL
       S1,
           #Z16: ON ^TTL_CS_PLUS_NR ---> S2   
       S2,
           0.001": OFF ^TTL_CS_PLUS_NR ---> S1

S.S.21, \CS- TTL
        S1,
            #Z17: ON ^TTL_CS_MINUS ---> S2   
        S2,
            0.001": OFF ^TTL_CS_MINUS ---> S1